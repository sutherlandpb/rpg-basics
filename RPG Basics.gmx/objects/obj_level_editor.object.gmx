<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create level Editor
current_tool = EDITOR_FLOOR;
current_enemy = ENEMY_SLIME;
current_enemy_sprite = spr_enemy_slime;

//tileset
wall_tileset = bg_wall_tiles;
floor_tile = bg_tile;
tileset_max = 3;
current_tileset = 0;
scr_select_tileset(current_tileset);
//resize
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;

//set the grid width and height
width = room_width div CELL_WIDTH;
height = room_height div CELL_HEIGHT;

//create grid
grid = ds_grid_create(width, height);
grid_items = ds_grid_create(width, height);

//fill the grid with void values
ds_grid_set_region(grid, 0, 0, width - 1, height -1, VOID);
ds_grid_set_region(grid_items, 0, 0, width - 1, height -1, VOID);

//create a random grid within the width and height dimensions
scr_randomize_grid(height, width);

//adds walls to the grid where needed
scr_add_walls(height, width);
scr_draw_level(height, width);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the room
var view = 0;
var amount = view_wview[view]/80;

scr_get_input();

if (spell_key) {
    if (current_tileset == tileset_max) {
        current_tileset = 0;
    } else {
        current_tileset++;     
    }
    scr_draw_level(height, width);
}
//tools
if (num0_key) {
    current_tool = EDITOR_FLOOR;
}
if (num1_key) {
    current_tool = EDITOR_ENEMY;
}
if (num2_key) {
    current_tool = EDITOR_EXIT;
}
if (num3_key) {
    current_tool = EDITOR_FLOOR;
    var msg = get_string("Save Level", "")
    scr_save_level(msg, grid, current_tileset);
}
if (num4_key) {
    current_tool = EDITOR_FLOOR;
    var msg = get_string("Open Level", "")
    scr_load_level(msg);
    scr_draw_level(height, width);
}

//PAN
if (up_key) {
    view_yview[view] -= amount;
}
if (down_key) {
    view_yview[view] += amount;
}
if (left_key) {
    view_xview[view] -= amount;
}
if (right_key) { 
    view_xview[view] += amount;
}
//zoom
if (mouse_wheel_up()) {
    scr_editor_zoom(-.1, view);
}
if (mouse_wheel_down()) {
    scr_editor_zoom(.1, view);
}

var button_width = display_get_gui_width() div 18;
var ignorex = button_width * 1.5;

var mousex = device_mouse_x_to_gui(0);
var mousey = device_mouse_y_to_gui(0);
var ignore_mouse = false;
if (mousex &lt;= ignorex) {
    ignore_mouse = true;
}

//add a floor tile
if (!ignore_mouse &amp;&amp; mouse_check_button(mb_left)) {
    if (current_tool == EDITOR_FLOOR) { 
        var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
        if (tile_type != FLOOR) {
            //set it to floor        
            obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = FLOOR;            
        }
    } else if (current_tool == EDITOR_ENEMY) {
        obj_level_editor.grid_items[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = current_enemy;        
    } else if (current_tool == EDITOR_EXIT) {
        obj_level_editor.grid_items[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = EXIT_DOOR;        
    }
    scr_draw_level(height, width);
}
//remove tile
if (!ignore_mouse &amp;&amp; mouse_check_button(mb_right)) {
    if (current_tool == EDITOR_FLOOR) { 
        var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
        if (tile_type != VOID) {
            //delete the tile and set it to void
            var tile;
            tile = tile_layer_find(0, mouse_x, mouse_y);
            if tile_exists(tile) tile_delete(tile);
    
            //set it to VOID, and all surrounding tiles that are walls to void (they will be filled in if needed)  
            obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = VOID;        
            //surrounding
            if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH) -1, (mouse_y div CELL_HEIGHT) ] == WALL) {
                obj_level_editor.grid[# (mouse_x div CELL_WIDTH) -1, (mouse_y div CELL_HEIGHT) ] = VOID;
            }
            if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH) +1, (mouse_y div CELL_HEIGHT)] == WALL) {
                obj_level_editor.grid[# (mouse_x div CELL_WIDTH) +1, (mouse_y div CELL_HEIGHT)] = VOID;
            }
            if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) -1] == WALL) {
                obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) -1] = VOID;
            }
            if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) +1] == WALL) {
                obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) +1] = VOID;
            }       
        }
    } else if (current_tool == EDITOR_ENEMY) {
        obj_level_editor.grid_items[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = VOID;                
    } else if (current_tool == EDITOR_EXIT) {
        obj_level_editor.grid_items[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = VOID;            
    }    
    scr_draw_level(height, width);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw UI

var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
var tile_string = scr_get_tileset_name(current_tileset);
var type_string = "";
switch(tile_type) {
    case FLOOR : 
        type_string = "Floor";
        break;
    case WALL : 
        type_string = "Wall";
        break;
    case VOID : 
        type_string = "Void";
        break;            
    
}

//draw the menu
scr_draw_editor_menu();
scr_draw_with_shadow(32, 32, "Tile: " + type_string);
scr_draw_with_shadow(32, 64, "Tileset: " + tile_string);









</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
