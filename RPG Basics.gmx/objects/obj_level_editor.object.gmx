<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create level

//tileset
wall_tileset = bg_wall_tiles;
floor_tile = bg_tile;
tileset_max = 3;
current_tileset = 0;
scr_select_tileset(current_tileset);
//resize
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;

//set the grid width and height
width = room_width div CELL_WIDTH;
height = room_height div CELL_HEIGHT;

//create grid
grid = ds_grid_create(width, height);

//fill the grid with void values
ds_grid_set_region(grid, 0, 0, width - 1, height -1, VOID);

//randomize the level
randomize();

//create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

//direction of controller (directions 0-3)
var cdir = irandom(3);

// the odds variable for changing direction
var odds = 1;

//create the level using 1000 steps
repeat (1000) {
    //place a floor tile at the controller position
    grid[# cx, cy] = FLOOR;
         
    //randomize direction
    if (irandom(odds) == odds) {
        cdir = irandom(3);        
    }
    //move the controller
    var xdir = lengthdir_x(1, cdir * 90);
    var ydir = lengthdir_y(1, cdir * 90);
    cx += xdir;
    cy += ydir;
    
    //make sure we don't move outside the grid
    cx = clamp(cx, 1, width - 2);
    cy = clamp(cy, 1, height - 2);
}

//adds walls to the grid where needed
scr_add_walls(height, width);
scr_draw_level(height, width);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the room
var view = 0;
var amount = view_wview[view]/80;

scr_get_input();

if (spell_key) {
    if (current_tileset == tileset_max) {
        current_tileset = 0;
    } else {
        current_tileset++;     
    }
    scr_draw_level(height, width);
}

if (up_key) {
    view_yview[view] -= amount;
}
if (down_key) {
    view_yview[view] += amount;
}
if (left_key) {
    view_xview[view] -= amount;
}
if (right_key) { 
    view_xview[view] += amount;
}

if (mouse_wheel_up()) {
    scr_editor_zoom(-.1, view);
}
if (mouse_wheel_down()) {
    scr_editor_zoom(.1, view);
}

//add a floor tile
if (mouse_check_button(mb_left)) {
    var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
    if (tile_type != FLOOR) {
        //set it to floor        
        obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = FLOOR;
        scr_draw_level(height, width);
    }
}

//remove tile
if mouse_check_button(mb_right) {
    var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
    if (tile_type != VOID) {
        //delete the tile and set it to void
        var tile;
        tile = tile_layer_find(0, mouse_x, mouse_y);
        if tile_exists(tile) tile_delete(tile);

        //set it to VOID, and all surrounding tiles that are walls to void (they will be filled in if needed)  
        obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT] = VOID;        
        //surrounding
        if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH) -1, (mouse_y div CELL_HEIGHT) ] == WALL) {
            obj_level_editor.grid[# (mouse_x div CELL_WIDTH) -1, (mouse_y div CELL_HEIGHT) ] = VOID;
        }
        if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH) +1, (mouse_y div CELL_HEIGHT)] == WALL) {
            obj_level_editor.grid[# (mouse_x div CELL_WIDTH) +1, (mouse_y div CELL_HEIGHT)] = VOID;
        }
        if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) -1] == WALL) {
            obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) -1] = VOID;
        }
        if (obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) +1] == WALL) {
            obj_level_editor.grid[# (mouse_x div CELL_WIDTH), (mouse_y div CELL_HEIGHT) +1] = VOID;
        }       
        
        scr_draw_level(height, width);
    }


}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw UI

var tile_type = obj_level_editor.grid[# mouse_x div CELL_WIDTH, mouse_y div CELL_HEIGHT];
scr_draw_with_shadow(32, 32, "Tile: " + string(tile_type) + " Tileset: " + string(current_tileset));






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
