<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize the stats
hp = 5;
maxhp = hp;
stamina = 10;
maxstamina = stamina;
mana = 0;
maxmana = 0;
attack = 1;
ranged_attack = 1;
expr = 0;
maxexpr = 3;
level = 1;
weapon_sprite = spr_sword;

//Weapon switches
has_weapon[WEAPON_SWORD] = true;
has_weapon[WEAPON_AXE] = false;
has_weapon[WEAPON_BONE] = false;
has_weapon[WEAPON_RAINBOW] = false;

current_weapon = WEAPON_SWORD;

draw_set_color(c_white);

// get the player's start position
if (instance_exists(obj_player)) {
    player_xstart = obj_player.x;
    player_ystart = obj_player.y;
} else {
    player_xstart = 0;
    player_ystart = 0;
}
//save previous room
previous_room = room;

room_start_action = NEW_ROOM;
random_count = 0;

//onscreen controls
onscreen_controls = true;

switch (os_type) {
    case os_windows: 
        onscreen_controls = false;        
        break;
    case os_android: 
    case os_ios: 
    case os_winphone: 
        onscreen_controls = true;
        break;
}

weapon_frame = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mana refresh
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stat recharge

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //control the stats

//hp
if (hp &lt; 0) {
    hp = 0;
}

//stamina
if (room != rm_pause &amp;&amp; room != rm_dead &amp;&amp; stamina &lt; maxstamina &amp;&amp; alarm[0] == -1) {
    stamina++;
    alarm[0] = room_speed * 2;
}

//mana
if (room != rm_pause &amp;&amp; room != rm_dead  &amp;&amp; mana &lt; maxmana &amp;&amp; alarm[1] == -1) {
    mana++;
    alarm[1] = room_speed * 2;
}


// pause the game
if (obj_input.pause_key) {
    obj_input.pause_key = false;
    if (room != rm_pause) {
        if (instance_exists(obj_player)) {
            obj_player.persistent = false;
        }
        previous_room = room;
        room_persistent = true;
        room_goto(rm_pause);    
    } else {    
        room_goto(previous_room);        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remember player's start position
if (room == rm_pause|| room == rm_dead) {
    exit;
}
switch (room_start_action) {
    case RETURN:
        break;
    case NEW_ROOM:
    default:
        if (instance_exists(obj_player)) {
            player_xstart = obj_player.x;
            player_ystart = obj_player.y;
        }
        break;
    case LOAD: 
        scr_load_game(obj_player_stats.save_name);
        break;    
}
room_persistent = false;
room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stats
var listnum = 1;

var hppercent = hp / maxhp * 100.0;
var manapercent = mana / maxmana * 100;
var staminapercent = stamina / maxstamina * 100;
var offset = display_get_gui_height() div 90;
var barx = display_get_gui_width() div 192;
var bary = 0;
var barlength = display_get_gui_width() div 9.6;
var xx = barx + offset + barlength;
var yy = display_get_gui_height() div 33.75;


scr_draw_with_shadow(xx, yy * listnum, "HP: " + string(hp) + "/" + string(maxhp));
scr_draw_with_shadow(xx, yy * ++listnum, "STAMINA: " + string(stamina) + "/" + string(maxstamina));
if (maxmana &gt;= SPELL_COST) {
    scr_draw_with_shadow(xx, yy * ++listnum, "MANA: " + string(mana) + "/" + string(maxmana));
}
scr_draw_with_shadow(xx, yy * ++listnum, "LEVEL: " + string(level));
bary += offset * 3.5;
draw_healthbar(barx, bary, barx + barlength, bary + offset, hppercent, c_ltgray, c_red, c_green, 0, true, true);
bary += offset * 2.8;
draw_healthbar(barx, bary, barx + barlength, bary + offset, staminapercent, c_ltgray, c_white, c_yellow, 0, true, true);
if (maxmana &gt;= SPELL_COST) {
    bary += offset * 2.8;
    draw_healthbar(barx, bary, barx + barlength, bary + offset, manapercent, c_ltgray, c_gray, c_blue, 0, true, true);
}

//Draw weapon HUD
var weaponx = display_get_gui_width() * .9;
var weapony = display_get_gui_height() div 13.5;
var scale = display_get_gui_width() * .004;
var weapon_offset = scale * 14;
draw_sprite_ext(spr_weapon_box, 0, weaponx, weapony, scale, scale, 90, c_white, .5);
//weapon_sprite
draw_sprite_ext(weapon_sprite, weapon_frame++ div 10, weaponx, weapony + weapon_offset, scale, scale, 90, c_white, 1);

if (weapon_frame &gt;= 60) {
    weapon_frame = 0;
}
// draw on-screen controls if needed
if (onscreen_controls) {
    scr_draw_onscreen_controls();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
